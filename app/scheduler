#!/bin/bash

trap cleanup TERM
cleanup () {
	echo "Stopping pi_video_matrix"
	if [ -f "/var/run/pi_video_matrix.pid" ]; then
		pi_video_matrix stop
	fi
	vcgencmd display_power 1
	if [ -n "$pid" ]; then
		kill "$pid"
	fi
	exit 0
}

conf=/etc/pi_video_matrix

if [ -r /etc/pi_video_matrix/scheduler.conf ]; then
	. $conf/scheduler.conf;
else
	echo "$conf/scheduler.conf does not exist or is not readable."
exit 1
fi

sleep_func () {
	sleep "$1" & pid=$!
	wait
	pid=
}

pvm_stop () {
	if [ -f "/var/run/pi_video_matrix.pid" ]; then
		pi_video_matrix stop
	fi
	vcgencmd display_power 0
}

pvm_start () {
	vcgencmd display_power 1
	pi_video_matrix start &
	wait
}

open_test () {
	[ "$(date +%H%M)" -ge "$1" ] && [ "$(date +%H%M)" -le "$2" ]
}

closed_test () {
	[ "$(date +%H%M)" -le "$1" ] || [ "$(date +%H%M)" -ge "$2" ]
}

open_loop () {
	while [ "$(date +%H%M)" -ge "$1" ] && [ "$(date +%H%M)" -le "$2" ]; do
		pi_video_matrix repair
		sleep_func 60
	done
}

closed_loop () {
	while [ "$(date +%H%M)" -le "$1" ] || [ "$(date +%H%M)" -ge "$2" ]; do
		sleep_func 60
	done
}

on_loop () {
	while [ "$(date +%w)" -eq "$1" ]; do
		pi_video_matrix repair
		sleep_func 60
	done
}

off_loop () {
	while [ "$(date +%w)" -eq "$1" ]; do
		sleep_func 60
	done
}

dow_test () {
	if [ -z "$1" ] || [ -z "$2" ]; then
		# On
		pvm_start
		on_loop "$3"
	elif [ "$1" = "$2" ]; then
		# Off
		pvm_stop
		off_loop "$3"
	elif open_test "$1" "$2"; then
		# Open
		pvm_start
		open_loop "$1" "$2"
	elif closed_test "$1" "$2"; then
		# Closed
		pvm_stop
		closed_loop "$1" "$2"
	fi
}

while true; do
	dow_num=$(date +%w)
	dow_day=$(date +%a)
	eval arg1=\$"${dow_day}"_on
	eval arg2=\$"${dow_day}"_off
	dow_test "$arg1" "$arg2" "$dow_num"
done
