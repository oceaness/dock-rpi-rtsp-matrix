#!/bin/bash

# version:0.5

conf_dir=/etc/pi_video_matrix

# Exit if config file is not present and readable
if [ -r $conf_dir/pi_video_matrix.conf ]; then
	. $conf_dir/pi_video_matrix.conf;
else
	echo "$conf_dir/pi_video_matrix.conf does not exist or is not readable."
	exit 1
fi

# sed command removes Windows carriage returns, # comments, and then deletes empty lines
# Exit if feeds file not present and readable
if [ -r $conf_dir/feeds.conf ]; then
	# Exit if feeds files is empty
	if [ "$(sed -e 's/\r//' -e 's/#.*//' -e '/^$/d' $conf_dir/feeds.conf | wc -c)" -eq 0 ]; then
		echo "$conf_dir/feeds.conf has not been edited."
		echo "Please provide a list of video feed URLs."
		exit 1
	else
		# Create an array of feeds from feeds.conf
		while read -r line; do
			camera_feeds[${#camera_feeds[@]}]="$line"
		done <<< "$(sed -e 's/\r//' -e 's/#.*//' -e '/^$/d' $conf_dir/feeds.conf)"
	fi
else
	echo "$conf_dir/feeds.conf does not exist or is not readable."
	exit 1
fi

# Load manual override conf or generate conf
if [ -r $conf_dir/layout.conf ]; then
	. $conf_dir/layout.conf
else
	feeds=${#camera_feeds[@]}
	if [ -z "$on_screen" ] || [ "$on_screen" -gt "$feeds" ]; then
		on_screen=$feeds
	fi
	# Generate default layout conf file
	gen_matrix "$on_screen" "$stretch" "$feeds"
	. $conf_dir/default.layout.conf
fi

# Ensure there is an omxplayer timeout value
if [ -z "$omx_timeout" ]; then
	omx_timeout=30
fi

# Ensure there is a startsleep value
if [ -z "$startsleep" ]; then
	startsleep=3
fi

# Ensure there is a feedsleep value
if [ -z "$feedsleep" ]; then
	feedsleep=1
fi

# Ensure there is a retry value
if [ -z "$retry" ]; then
	retry=5
fi

# Ensure there is a rotatedelay value
if [ -z "$rotatedelay" ]; then
	rotatedelay=5
fi

# Turn blanking on by default
if [ -z "$blank" ]; then
	blank=true
fi

# Set a variables for PID file and Display Sequence file
PIDFILE=/var/run/pi_video_matrix.pid
DISPLAY_SEQUENCE_FILE=/tmp/pi_video_matrix.seq

# How many cameras do we have?
cameras="${#camera_names[@]}"
# Set the max camera rotation sequence as one less than the number of cameras
# (since it starts at zero).
max_seq=$((cameras-1))

# Figure out the current display sequence or set it to zero if it doesn't exist.
if [ ! -f $DISPLAY_SEQUENCE_FILE ]; then
	echo 0 > $DISPLAY_SEQUENCE_FILE
fi
declare -i DISPLAY_SEQUENCE
DISPLAY_SEQUENCE=$(cat $DISPLAY_SEQUENCE_FILE)

# Functions

case "$1" in
# Start displaying camera feeds
start)
if [ -f $PIDFILE ]; then
	echo "PID file exists!  Stop or Restart this service instead."
exit 1
fi
if [ "$blank" = "true" ]; then
	echo "Blanking screen"
	fbi --noverbose -T 2 /usr/bin/black.png >/dev/null 2>&1 &
fi
startupfailure=false
feedfailure=false
for i in ${!camera_names[*]}; do
	startupretry=0
	feedretry=0
	x=$((i+DISPLAY_SEQUENCE))
	if [ "$x" -ge "${#camera_names[@]}" ]; then
		x=$((x-${#camera_names[@]}))
	fi
	player="omxplayer --no-keys --no-osd --avdict rtsp_transport:tcp --win \"${window_positions[$x]}\" \"${camera_feeds[$i]}\" --live -n -1 --timeout $omx_timeout --dbus_name "org.mpris.MediaPlayer2.omxplayer.${camera_names[$i]}" >/dev/null &"
	echo "Starting omxplayer for ${camera_names[$i]}"
	eval "$player"
	sleep "$startsleep"
	while [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" != "Playing" ]; do
		sleep 1
		echo "Waiting for ${camera_names[$i]} omxplayer startup $startupretry"
		if [ "$startupretry" -eq "$retry" ]; then
			break
		fi
		startupretry=$((startupretry+1))
	done
	if [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" = "Playing" ]; then
		sleep "$feedsleep"
		while [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getposition)" = "0s" ]; do
			sleep 1
			echo "Waiting for ${camera_names[$i]} playback $feedretry"
			if [ "$feedretry" -eq "$retry" ]; then
				omxplayer_dbuscontrol "$i" quit
				feedfailure=true
				break
			fi
		feedretry=$((feedretry+1))
		done
	else
		startupfailure=true
	fi
	if [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" = "Playing" ] && [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getposition)" != "0s" ]; then
		echo "${camera_names[$i]} started"
	else
		echo "${camera_names[$i]} failed playback"
	fi
done
touch $PIDFILE
# One go at a repair job if not all displays start correctly
if [ "$startupfailure" = "true" ] || [ "$feedfailure" = "true" ]; then
	echo "Running a repair on failed feeds."
	$0 repair startup
fi
echo "Camera Display Started"
echo "For complete status info, run"
echo "/usr/bin/pi_video_matrix status."
if [ "$rotate" = "true" ]; then
	echo "Starting camera rotation"
	if [ "$rotaterev" = "true" ]; then
		rotatedisplays rotaterev $rotatedelay &
	else
		rotatedisplays rotate $rotatedelay &
	fi
fi
;;

# Stop displaying camera feeds, rotation and blanking
stop)
rm -f $PIDFILE
rm -f $DISPLAY_SEQUENCE_FILE
if [ "$blank" = "true" ]; then
	echo "Stopping fbi"
	pkill fbi
fi
if [ "$rotate" = "true" ]; then
	echo " Stopping rotation"
	pkill rotatedisplays
fi
for i in "${camera_names[@]}"; do
	echo "Stopping camera $i"
	omxplayer_dbuscontrol "$i" quit
done
echo "Stopping dbus-daemon"
pkill dbus-daemon
echo "Camera Display Stopped, exiting"
exit 0
;;

# Restart
restart)
$0 stop
sleep 1
$0 start
;;

# Restart any camera feeds that don't claim to be playing or restart the service
# if too many omxplayer.bin instances are active.
repair)
# Do nothing unless the service PID file exists
if [ ! -f $PIDFILE ]; then exit 0; fi
# Stop and start the service if we have too many omxplayers
if [ "$(pgrep -c omxplayer.bin)" -gt "$cameras" ]; then
	$0 restart
fi
# The actual repair part
for i in ${!camera_names[*]}; do
	if [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" != "Playing" ] || [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getposition)" = "0s" ]; then
		rm -f $PIDFILE
		pkill rotatedisplays
		omxplayer_dbuscontrol "${camera_names[$i]}" quit
		x=$((i+DISPLAY_SEQUENCE))
		if [ "$x" -ge "${#camera_names[@]}" ]; then
			x=$((x-${#camera_names[@]}))
		fi
		player="omxplayer --no-keys --no-osd --avdict rtsp_transport:tcp --win \"${window_positions[$x]}\" \"${camera_feeds[$i]}\" --live -n -1 --timeout $omx_timeout --dbus_name "org.mpris.MediaPlayer2.omxplayer.${camera_names[$i]}" >/dev/null &"
		echo "Starting omxplayer for ${camera_names[$i]}"
		eval "$player"
		sleep "$startsleep"
		startupretry=0
		feedretry=0
		while [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" != "Playing" ]; do
			sleep 1
			echo "Waiting for ${camera_names[$i]} omxplayer startup $startupretry"
			if [ "$startupretry" -eq "$retry" ]; then
				break
			fi
			startupretry=$((startupretry+1))
		done
		if [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" = "Playing" ]; then
			sleep "$feedsleep"
			while [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getposition)" = "0s" ]; do
				sleep 1
				echo "Waiting for ${camera_names[$i]} playback $feedretry"
				if [ "$feedretry" -eq "$retry" ]; then
					omxplayer_dbuscontrol "$i" quit
					feedfailure=true
					break
				fi
				feedretry=$((feedretry+1))
			done
		else
			startupfailure=true
		fi
		if [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getplaystatus)" = "Playing" ] && [ "$(omxplayer_dbuscontrol "${camera_names[$i]}" getposition)" != "0s" ]; then
			echo "${camera_names[$i]} started"
		else
			echo "${camera_names[$i]} failed playback"
		fi
		touch $PIDFILE
		if [ "$rotate" = "true" ] && [ "$2" != "startup" ]; then
			echo "Restarting camera rotation"
			if [ "$rotaterev" = "true" ]; then
				rotatedisplays rotaterev $rotatedelay &
			else
				rotatedisplays rotate $rotatedelay &
			fi
		fi
	fi
done
;;

rotate)
# Do nothing unless the service PID file exists
if [ ! -f $PIDFILE ]; then exit 0; fi
DISPLAY_SEQUENCE=$((DISPLAY_SEQUENCE-1))
if [ "$DISPLAY_SEQUENCE" -lt "0" ]; then
        DISPLAY_SEQUENCE="$max_seq"
fi
for i in ${!camera_names[*]}; do
        y=$((i-DISPLAY_SEQUENCE-1))
        if [ "$y" -lt "0" ]; then
			y=$((y+cameras))
        fi
        if [ "$y" -ge "$cameras" ]; then
			y=$((y-cameras))
        fi
        x=$((y+DISPLAY_SEQUENCE))
        if [ "$x" -ge "$cameras" ]; then
			x=$((x-cameras))
        fi
        eval omxplayer_dbuscontrol "${camera_names[$y]}" setvideopos \""${window_positions[$x]}"\"
done
echo $DISPLAY_SEQUENCE > $DISPLAY_SEQUENCE_FILE
;;

rotaterev)
# Do nothing unless the service PID file exists
if [ ! -f $PIDFILE ]; then exit 0; fi
DISPLAY_SEQUENCE=$((DISPLAY_SEQUENCE+1))
if [ "$DISPLAY_SEQUENCE" -ge "${#camera_names[@]}" ]; then
        DISPLAY_SEQUENCE=0
fi
for i in ${!camera_names[*]}; do
        y=$((i-DISPLAY_SEQUENCE+1))
        if [ "$y" -lt "0" ]; then
			y=$((y+cameras))
        fi
        if [ "$y" -ge "$cameras" ]; then
			y=$((y-cameras))
        fi
        x=$((y+DISPLAY_SEQUENCE))
        if [ "$x" -ge "$cameras" ]; then
			x=$((x-cameras))
        fi
        eval omxplayer_dbuscontrol "${camera_names[$y]}" setvideopos \""${window_positions[$x]}"\"
done
echo $DISPLAY_SEQUENCE > $DISPLAY_SEQUENCE_FILE
;;

status)
for i in "${camera_names[@]}"; do
	status="$(omxplayer_dbuscontrol "$i" status 2>/dev/null)"
	if [[ "$status" != "Playing"* ]]; then
		echo "$i is NOT playing"
	else
		echo "$i is $status"
	fi
done
;;

positions)
for i in "${camera_names[@]}"; do
	position="$(omxplayer_dbuscontrol "$i" getposition)"
	echo "$position $i"
done
;;

*)
echo "Usage: /usr/bin/pi_video_matrix {start|stop|restart|repair|status|positions|rotate|rotaterev}"
exit 1
;;
esac
